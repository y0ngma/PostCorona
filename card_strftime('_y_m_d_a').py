# -*- coding: utf-8 -*-
"""card_strftime('%Y-%m-%d %a')

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YIeDOucsOIgFvnGtdqNqRE1BsTQt7l1Z
"""

# Commented out IPython magic to ensure Python compatibility.
import os 
import glob
import pandas as pd
import numpy as np
# %matplotlib inline
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
## 코렙에서 폰트 설정하는법
# 사용가능한 시스템의 TTF 폰트 목록
import matplotlib.font_manager as font_manager

font_list = font_manager.findSystemFonts(fontpaths=None, fontext='ttf')

print('사용가능한 TTF 폰트 개수:', len(font_list))
font_list[:10] # 목록에서 처음 10 개만 보기

import matplotlib as mpl
import matplotlib.pyplot as plt
 
# 한글이 흐릿하게 보이는 현상 개선
# %config InlineBackend.figure_format = 'retina'
 
# 한글이 지원되도록 폰트설치
!apt -qq -y install fonts-nanum

# 해당폰트가 기본 폰트가 되도록 설정
import matplotlib.font_manager as fm
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=9)
plt.rc('font', family='NanumBarunGothic') 
mpl.font_manager._rebuild() # 폰트설정관련 rebuild 명령 인가

path = "/content/drive/My Drive/data/PostCorona/card.csv"
card = pd.read_csv(path)

# df['email'].str.count(pat='[0-9]')
# 문자열 중 패턴에 일치한 수 반환
# 석재, 커텐, 영상물, 복지매장, 축협직영매장

err_values = ["석재", "커텐", "영상물", "복지매장", "축협직영매장"]

for err_value in err_values:
    card = card.drop(   card[card["selng_cascnt"] == err_value].index )

card["selng_cascnt"] = card["selng_cascnt"].astype("int64") 
card["salamt"] = card["salamt"].astype("int64") 

card.info()

sns.heatmap(card.isnull(), cbar=False )

"""## 중분류 컬럼 추가

- mrhst_induty_clm_code 이라는 컬럼을 만들어주고 code 슬라이싱해서 앞에 2자리만 가지고 온 후
- mrhst_induty_clm_code 컬럼에 추가한다
"""

card['mrhst_induty_clm_code'] = 0
card['mrhst_induty_cl_code'] = card['mrhst_induty_cl_code'].astype(str)
card['mrhst_induty_clm_code'] = card['mrhst_induty_cl_code'].str.slice(start=0, stop=2)

# 순서 정리
card = card[['receipt_dttm',  'adstrd_code', 'adstrd_nm','mrhst_induty_clm_code', 'mrhst_induty_cl_code',
       'mrhst_induty_cl_nm', 'selng_cascnt', 'salamt']]
# card.head()

# 내가 업무할당 받은 카테고리 코드로 구성된 데이터 프레임 추출
my_card = card[(card.mrhst_induty_clm_code=='84')|
          (card.mrhst_induty_clm_code=='11')|
          (card.mrhst_induty_clm_code=='43')|
          (card.mrhst_induty_clm_code=='41')|
          (card.mrhst_induty_clm_code=='32')|
          (card.mrhst_induty_clm_code=='60')|
          (card.mrhst_induty_clm_code=='62')|
          (card.mrhst_induty_clm_code=='95')|
          (card.mrhst_induty_clm_code=='96')]
# my_card.info()

def weekday(x):
    if x == 0:
        x = "월요일"
    if x == 1:
        x = "화요일"
    if x == 2:
        x = "수요일"
    if x == 3:
        x = "목요일"
    if x == 4:
        x = "금요일"
    if x == 5:
        x = "토요일"
    if x == 6:
        x = "일요일"
    return x

# my_card['receipt_dttm'] = pd.to_datetime(my_card.receipt_dttm) # object to datetime64[ns]
my_card['receipt_dttm'] = pd.to_datetime(my_card['receipt_dttm'], format='%Y%m%d')
my_card['receipt_dttm1']= my_card['receipt_dttm'].dt.strftime('%Y-%m-%d %a') # 변환된 컬럼을 읽어서 요일추가

my_card['week'] = my_card['receipt_dttm'].dt.weekday 
my_card['week'] = my_card['week'].apply(weekday)

CODE   = '11'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# mrhst_induty_cl_nm 를 총금액 또는 건수로 정렬해보기
X.sort_values(['mrhst_induty_cl_nm', 'selng_cascnt'], ascending=False).groupby('mrhst_induty_cl_nm').head(3).head()

"""## 그래프 그리기
- 건수 혹은 금액이 너무 커서 그래프보기가 난해한 항목을 제외하고 그린다.

### 84.홍삼 따위의 건가식품
"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '84'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())

if len(remove_ctgrys) >=5:
  remove_ctgrys = remove_ctgrys[:2]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )

# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y-%m-%d %a'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y-%m-%d %a'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 11.교통수단별 소비"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '11'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 주중
# X = X[ (X["week"] == "월요일") |
#        (X["week"] == "화요일") |
#        (X["week"] == "수요일") |
#        (X["week"] == "목요일") |        
#        (X["week"] == "금요일") ]
# # 주말
# X = X[ (X["week"] == "토요일") |
#        (X["week"] == "일요일") ]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())
if len(remove_ctgrys) >=5:
  remove_ctgrys = remove_ctgrys[:4]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
    
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 43.직물"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '43'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())
if len(remove_ctgrys) >=5:
  remove_ctgrys = remove_ctgrys[:2]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 41.비영리유통(구내매점)"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '41'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())
if len(remove_ctgrys) >=3:
  remove_ctgrys = remove_ctgrys[:1]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 32.주방용구"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '32'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())
remove_ctgrys =['정 수 기']
# if len(remove_ctgrys) >=4:
#   remove_ctgrys = remove_ctgrys[:1]
# else:
#   remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 60.자동차판매"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '60'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())
remove_ctgrys = [
                 '국산 신차',
                 '이륜차판매', 
                #  '수입자동차',
                #  '중고자동차','기타 운송', '중고자동차위탁판매'
                 ]

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 62.보험류"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '62'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())

if len(remove_ctgrys) >=5:
  remove_ctgrys = remove_ctgrys[:2]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 95.통신판매(홈쇼핑??)"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '95'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())

if len(remove_ctgrys) >=3:
  remove_ctgrys = remove_ctgrys[:1]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

"""### 96.농업관련"""

CODES  = ['84', '11', '43', '41', '32', '60', '62', '95', '96']
CODE   = '96'
X      = my_card[my_card["mrhst_induty_clm_code"] == "{}".format(CODE)]
Y      = ['selng_cascnt', "salamt"]

# 건수 및 금액으로 정렬한것중 상위 몇개를 제거한다
remove_ctgrys = X.groupby('mrhst_induty_cl_nm').count().sort_values(Y, ascending=False).index
print("List of 'mrhst_induty_cl_nm' sorted by its count", remove_ctgrys)
print("++++ target day ", X["week"].unique())

if len(remove_ctgrys) >=5:
  remove_ctgrys = remove_ctgrys[:2]
else:
  remove_ctgrys = []

for remove_ctgry in remove_ctgrys:
    print(len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]))
    if len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) > 0:
        print( "col_name = {}, the number of ctgry removed : {}".format(str(remove_ctgry),
                len( X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)) )
        X = X.drop(index = X[X["mrhst_induty_cl_nm"]==remove_ctgry].index)

    elif len(X[X["mrhst_induty_cl_nm"]== remove_ctgry]) == 0:
        print("No ctgrys :", str(remove_ctgry) )
        
# 제거된것으로 그래프를 그려본다
fig,axes = plt.subplots(2,1,figsize=(20,8))
sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d'), 
              y = Y[0], # 개수
              data = X, ax=axes[0], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매건수, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )

sns.lineplot( x = pd.to_datetime(X['receipt_dttm'], format='%Y%m%d' ), 
              y = Y[1], # 금액 
              data = X, ax=axes[1], hue = "mrhst_induty_cl_nm", estimator = np.sum, ci = None 
).set_title("국가표준분류코드 : {}에 해당하는 세분류 구매금액, \n 포함항목 {}, \n 제외항목 : {}"
            .format(CODE, X["mrhst_induty_cl_nm"].unique(), remove_ctgrys[:len(remove_ctgrys)]) )







import pandas as pd
import matplotlib.pyplot as plt

# Add a couple of extra dates to sample data
df = pd.DataFrame({'dt': ['2020-01-01',
                          '2020-01-02',
                          '2020-01-04',
                          '2020-01-05',
                          '2020-01-06',
                          '2020-01-07',
                          '2020-01-09',
                          '2020-01-10',
                          '2020-01-11',
                          '2020-01-12']})





