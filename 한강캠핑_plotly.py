# -*- coding: utf-8 -*-
"""한강캠핑_plotly

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O6NlVBD6uZSP_6lkM0CK96oc9jVoYuJc

# 제목
"""

# Commented out IPython magic to ensure Python compatibility.
import os 
import glob
import pandas as pd
import numpy as np
# %matplotlib inline
import seaborn as sns
import scipy as sp

## 코렙에서 폰트 설정하는법
# 사용가능한 시스템의 TTF 폰트 목록
import matplotlib.font_manager as font_manager

font_list = font_manager.findSystemFonts(fontpaths=None, fontext='ttf')

print('사용가능한 TTF 폰트 개수:', len(font_list))
font_list[:10] # 목록에서 처음 10 개만 보기

import matplotlib as mpl
import matplotlib.pyplot as plt
 
# 한글이 흐릿하게 보이는 현상 개선
# %config InlineBackend.figure_format = 'retina'
 
# 한글이 지원되도록 폰트설치
!apt -qq -y install fonts-nanum

# 해당폰트가 기본 폰트가 되도록 설정
import matplotlib.font_manager as fm
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=9)
plt.rc('font', family='NanumBarunGothic') 
mpl.font_manager._rebuild() # 폰트설정관련 rebuild 명령 인가

"""# 데이터 로드"""

path = '/content/drive/My Drive/data/PostCorona/'

# 행정동코드 텍스트파일 로드
adstrd_master = pd.read_csv(path+'adstrd_master.csv')

# 유동인구데이터 로드
fpopl = pd.read_csv(path+'fpopl.csv')

# 컬럼명 설명
cols = [
'base_ymd',
'tmzon_se_code',
'sexdstn_se_code',
'agrde_se_code',
'adstrd_code',
'popltn_cascnt']
details = [
'기준년월일',
'24시간대구분코드',
'성별구분코드',
'5세단위연령대구분코드',
'행정동코드',
'인구수'
]
data = list(zip(cols, details)) # data = {'cols':cols, 'details':details}
mynote_fpopl = pd.DataFrame(data, columns=['cols', 'details'])

# pop = fpopl[:500000]
pop = fpopl

# 배달데이터 로드
delivery = pd.read_csv(path+'delivery.csv')
# delivery = delivery[:1000000]

# 컬럼명 정리
cols = [
'SERIAL_NUMBER',
'PROCESS_DT',
'DLVR_RQESTER_ID',
'DLVR_REQUST_STTUS_VALUE',
'DLVR_RCEPT_CMPNY_ID',
'DLVR_STORE_ID',
'DLVR_STORE_INDUTY_NM',
'DLVR_STORE_LEGALDONG_CODE',
'DLVR_STORE_SIDO',
'DLVR_STORE_SIGUNGU',
'DLVR_STORE_DONG',
'DLVR_STORE_RI',
'DLVR_STORE_ADSTRD_CODE',
'DLVR_STORE_RDNMADR_CODE',
'DLVR_DSTN_LEGALDONG_CODE',
'DLVR_DSTN_SIDO',
'DLVR_DSTN_SIGUNGU',
'DLVR_DSTN_DONG',
'DLVR_DSTN_RI',
'DLVR_DSTN_ADSTRD_CODE',
'DLVR_DSTN_RDNMADR_CODE', 
'DLVR_MAN_ID',
'DLVR_AMOUNT',
'CALL_RLAY_FEE_AMOUNT',
'GOODS_AMOUNT',
'SETLE_KND_VALUE',
'SETLE_CARD_CN',
'DLVR_RCEPT_TIME',
'DLVR_CARALC_TIME',
'DLVR_COMPT_TIME',
'DLVR_CANCL_TIME'
]
details = [
'순번',
'처리일시',
'배달요청업체ID',
'배달요청상태값(1:완료,2:취소,3:사고,4:문의)',
'배달접수회사ID',
'배달상점ID',
'배달상점 업종이름',
'배달상점주소법정동코드',
'배달상점주소법정동시도명',
'배달상점주소법정동시군구명',
'배달상점주소법정동읍면동명',
'배달상점주소법정동리명',
'배달상점주소행정동코드',
'배달상점주소도로명주소코드',
'배달목적지주소법정동코드',
'배달목적지주소법정동시도명',
'배달목적지주소법정동시군구명',
'배달목적지주소법정동읍면동명',
'배달목적지주소법정동리명',
'배달목적지주소행정동코드',
'배달목적지주소도로명주소코드',
'배달기사ID',
'배달비용',
'호출중계수수료금액',
'배달상품금액',
'결제종류번호(1:카드,2:선불,3:현금)',
'결제카드종류',
'배달접수시간',
'배달배차시간',
'배달완료시간',
'배달취소시간'
]
data = list(zip(cols, details)) # data = {'cols':cols, 'details':details}
mynote_delivery = pd.DataFrame(data, columns=['cols', 'details'])

"""## 유동인구 날짜별 합산"""

pop = pop.groupby(['base_ymd', 'sexdstn_se_code', 'agrde_se_code','adstrd_code','popltn_cascnt']
            ).size().reset_index(name='count')
pop.drop(columns='count', inplace=True)

"""## 서울 배달데이터 필요한것만 필터링"""

# 배달목적지가 서울이면서 배달완료건만
delivered = delivery.DLVR_REQUST_STTUS_VALUE==1
seoul     = delivery.DLVR_DSTN_SIDO=="서울특별시"
deli      = delivery[ delivered & seoul ]
# deli      = delivery[ (delivery.DLVR_REQUST_STTUS_VALUE==1) & (delivery.DLVR_DSTN_SIDO=="서울특별시") ]
# 쓸만한 컬럼만 따로 보면, 
columns = [ 'PROCESS_DT',
            # 'DLVR_REQUST_STTUS_VALUE',
            'DLVR_STORE_INDUTY_NM',
            # 'DLVR_STORE_LEGALDONG_CODE',
            # 'DLVR_STORE_SIDO',
            # 'DLVR_STORE_SIGUNGU',
            # 'DLVR_STORE_DONG',
            # 'DLVR_STORE_RI',
            # 'DLVR_STORE_ADSTRD_CODE',
            # 'DLVR_STORE_RDNMADR_CODE',
            # 'DLVR_DSTN_LEGALDONG_CODE',
            'DLVR_DSTN_SIDO',
            'DLVR_DSTN_SIGUNGU',
            'DLVR_DSTN_DONG',
            # 'DLVR_DSTN_RI',
            'DLVR_DSTN_ADSTRD_CODE',
            # 'DLVR_DSTN_RDNMADR_CODE',
            'GOODS_AMOUNT']
deli = deli.filter(columns, axis=1) # df = delivery[columns].copy()
# deli.info()
# deli.head(3)

"""## 캠핑장 주소지 배달데이터
- 한강변 캠핑장주소지로 배달데이터 확인
"""

deli_han = delivery[ (delivery.DLVR_DSTN_DONG=="상암동") |
                  (delivery.DLVR_DSTN_DONG=="성수1가1동") |
                  (delivery.DLVR_DSTN_DONG=="자양동") |
                  (delivery.DLVR_DSTN_DONG=="여의도동") |
                  (delivery.DLVR_DSTN_DONG=="양화동") ]
deli_han.DLVR_DSTN_DONG.value_counts()

"""# 결측지 확인"""

target_col = "DLVR_DSTN_ADSTRD_CODE"

sns.heatmap(deli.isnull(), cbar=False )

print( "{}가 없는 행갯수 :{}, 전체행갯수 : {}, 비율 : {}".format(
    mynote_delivery[mynote_delivery.cols == target_col].details.values[0],
    len(deli[deli[target_col].isnull()==True].index),
    deli.shape[0], 
    len(deli[deli[target_col].isnull()==True].index)/deli.shape[0]) )
# 결측치가 있는 열을 지운다
deli.drop(index=deli[deli[target_col].isnull()==True].index, inplace=True)
print('전체행갯수:', deli.shape[0])

"""target_col = "adstrd_code"

sns.heatmap(pop.isnull(), cbar=False )

print( "{}가 없는 행갯수 :{}, 전체행갯수 : {}, 비율 : {}".format(
    mynote_fpopl[mynote_fpopl.cols == target_col].details.values[0],
    len(pop[pop[target_col].isnull()==True].index),
    pop.shape[0], 
    len(pop[pop[target_col].isnull()==True].index)/pop.shape[0]) )
# 결측치가 있는 열을 지운다
# pop.drop(index=pop[pop[target_col].isnull()==True].index, inplace=True)
# pop.shape
"""

target_col = "signgu_nm"
sns.heatmap(adstrd_master.isnull(), cbar=False )
adstrd_master.drop(index=adstrd_master[adstrd_master[target_col].isnull()==True].index, inplace=True)

"""# 날짜컬럼"""

deli['PROCESS_DT'] = pd.to_datetime(deli['PROCESS_DT'], format='%Y-%m-%d')
# deli['DT']= deli['PROCESS_DT'].dt.strftime('%Y-%m-%d %a') # 변환된 컬럼을 읽어서 요일추가
# deli['date1'] = pd.to_datetime(deli.date1) # object to datetime64[ns]
deli.info()
deli.head(1)

pop['base_ymd'] = pd.to_datetime(pop['base_ymd'], format='%Y%m%d')

# pop['DT']= pop['base_ymd'].dt.strftime('%Y-%m-%d %a') # 변환된 컬럼을 읽어서 요일추가
pop.info()
pop.head(1)

"""# 행정동코드 전처리

1. 10자리 정수로 변환
1. 배달데이터와 행정동데이터 병합
1. 유동인구데이터와 행정동데이터 병합
1. 배달데이터와 유동인구데이터의 행정동코드로 병합
1. 한강변을 따라 위치한 캠핑장의 행정동 알아내기
1. 그 위치로만 구성된 배달데이터 만들기

### 1.각 데이터프레임 행정동코드를 10자리로 정수변환
"""

deli.DLVR_DSTN_ADSTRD_CODE = deli.DLVR_DSTN_ADSTRD_CODE.astype('int64')
deli.head(1)

pop.adstrd_code = pop.adstrd_code*100
pop.head(1)

adstrd_master.adstrd_code = adstrd_master.adstrd_code*100
adstrd_master.adstrd_code = adstrd_master.adstrd_code.astype('int64')
adstrd_master.head(1)

"""### 2.유동인구데이터"""

# 행정동코드데이터의 동이름만 유동인구데이터에 행정동코드로 병합
pop = pd.merge(
    pop, 
    adstrd_master[["adstrd_nm", "adstrd_code"]], 
    left_on="adstrd_code",
    right_on="adstrd_code",
    how = "left" )

# 행정동코드 및 이름 서로 붙어있게 컬럼순서변경
cols = pop.columns.tolist()
# cols = cols[-1:] + cols[:-1]
cols = ['base_ymd','sexdstn_se_code','agrde_se_code','adstrd_code','adstrd_nm','popltn_cascnt']
pop = pop[cols]
# 그래프 그리는 컬럼명 통일하여 편의도모
pop.rename(columns={"base_ymd":"PROCESS_DT"}, inplace=True)
pop.head(1)

"""### 3.배달데이터"""

deli.tail(1)

# 행정동코드 컬럼의 이름을 통일
deli.rename( columns={"DLVR_DSTN_ADSTRD_CODE":"adstrd_code"},inplace=True )
# 병합
deli = pd.merge(
    deli,
    adstrd_master[["adstrd_nm", "adstrd_code"]],
    left_on = "adstrd_code",
    right_on = "adstrd_code",
    how = "left" )
deli.head(1)

# 행정동코드 및 이름 서로 붙어있게 컬럼순서변경
cols = ['PROCESS_DT', 'DLVR_DSTN_SIDO','DLVR_DSTN_SIGUNGU', 'DLVR_DSTN_DONG', 'adstrd_nm','adstrd_code','DLVR_STORE_INDUTY_NM', 'GOODS_AMOUNT']
deli = deli[cols]
deli.head(1)

"""### 4.법정동, 행정동 차이이해

> 배달데이터에는 법정동으로 되어있고 유동인구 및 캠핑장주소지는 행정동명으로 되어있다
- 따라서 행정동코드로 인덱싱하게된다
"""

print("행정동코드로 합친결과, 배달데이터의 법정동명과 행정동데이터의 행정동명이 다른것의 갯수와 총갯수는 각각 다음과 같다"
, len(deli[deli["DLVR_DSTN_DONG"] != deli["adstrd_nm"]].index), deli.shape[0] )

"""### 5.한강변 배달데이터프레임
1. 캠핑장의 행정동주소 인터넷 검색으로 알아오기
1. 그 주소들의 행정동코드 알아야함
1. 행정동코드 데이터 adstrd_master 에서 캠핑장 동주소의 행정동코드가 포함된것으로만 구성된 리스트 획득 
1. 한강변 캠핑장을 포함한 동으로만 구성된 배달데이터 만들기

#### 5.1.한강변 캠핑장의 동 주소
"""

# 같은 형식의 구주소/신주소 로 변환 후 동을 얻어온다
campdong = [
            ["한강공원 난지캠핑장", "서울 마포구 상암동"],# 상암동 배달건수없음
            ["노을공원 노을캠핑장", "서울 마포구 상암동"],# 상암동 배달건수없음
            ["성동 서울숲 여름캠핑장", "서울 성동구 성수1가1동"],# 처음에 성수동, 성수동 1가 등으로는 adstrd_nm에서 검색이 안됨.pop.adstrd_nm.unique()에서 "성수"로 검색하여 다음과 같은 이름을 찾음
            ["한강여름 뚝섬캠핑장", "서울 광진구 자양동"],# 광진구 배달건수없음
            ["한강여름 여의도캠핑장", "서울 영등포구 여의도동"],
            # ["양화 한강공원 캠핑장 오토캠핑장","서울 영등포구 양화동"] # 없어짐
]
df_camp = pd.DataFrame(campdong, columns = ['Name', "Address"])
# df_camp.Address = df_camp.Address.astype(str)
df_camp["adstrd_nm"] = df_camp.Address.str.slice(start=7, stop=13)
df_camp

"""#### 5.2캠핑장 행정동코드"""

# 한강변캠핑장 동주소 포함한 행정동코드 목록
# 단, 성수1가1동 과 같은곳이 있으면 코드를 더 추가해야함
codes = adstrd_master[(adstrd_master.adstrd_nm.str.slice(stop=2)=="여의")|
                      (adstrd_master.adstrd_nm.str.slice(stop=2)=="상암")|
                      (adstrd_master.adstrd_nm.str.slice(stop=2)=="성수")|
                      (adstrd_master.adstrd_nm.str.slice(stop=2)=="자양")].adstrd_code.unique()
codes
# deli[deli.adstrd_nm.str.slice(stop=2)=="성수"]
# deli[deli.adstrd_nm.str.slice(stop=2)=="상암"]
# deli[deli.adstrd_nm.str.slice(stop=2)=="여의"].adstrd_code.unique()[0]
# deli[deli.adstrd_nm.str.slice(stop=2)=="자양"]
# deli[deli.DLVR_DSTN_DONG.str.slice(stop=2)=="자양"]
# deli[deli.DLVR_DSTN_DONG.str.slice(stop=2)=="여의"]
# deli[deli.DLVR_DSTN_DONG.str.slice(stop=2)=="상암"]
# deli[deli.DLVR_DSTN_DONG.str.slice(stop=2)=="성수"]

"""#### 5.3해당코드로 반복문
- 캠핑장 행정동코드로 배달데이터에 반복문을 실행
- 빈 데이터프레임에 concat()으로 담아낸다
"""

# 해당코드를 포함한 배달건이 있는 지역 
lst = []
deli_han = pd.DataFrame()

for code in codes:
  tmp = deli[deli.adstrd_code == code] 
  if tmp.empty != True:
    print("배달건이 있는 행정동코드 : {}, 행정동명 : {}".format(
        code, adstrd_master[adstrd_master.adstrd_code == code].adstrd_nm.values))
    lst.append(code)
    deli_han = pd.concat([deli_han, tmp])
# print(lst)
# deli_han.shape[0]
deli_han.sample(1)

# 배달건이 있는 지역의 유동인구 확인 
pop_han = pd.DataFrame()
codes = lst # 배달건이 있는지역의 코드
lst = []

for code in codes:
  tmp = pop[pop.adstrd_code == code] 
  if tmp.empty != True:
    print("배달건이 있는 행정동코드 : {}, 행정동명 : {}".format(
        code, adstrd_master[adstrd_master.adstrd_code == code].adstrd_nm.values))
    lst.append(code)
    pop_han = pd.concat([pop_han, tmp])
print(lst)
# pop_han.shape[0]
pop_han.tail(1)

"""# 시각화

## 이동평균
"""

pop_han.adstrd_code = pop_han.adstrd_code.astype('str')
deli_han.adstrd_code = deli_han.adstrd_code.astype('str')

window = 7
window_col = 'sma_{}d'.format(window)
target_kind = str(lst[0]) # 행정동코드 리스트
target_amount = "GOODS_AMOUNT"
time_col = "PROCESS_DT"
df_tmp = deli_han[deli_han.adstrd_code == target_kind] # 원하는 데이터프레임 설정

# 날짜별 금액합산
df_sum = df_tmp.sort_values("{}".format(time_col), ascending=False).groupby([time_col]).mean()

# 날짜 | 계산할품목 | 이동평균 나오는 데이터프레임 생성
df_sma = pd.DataFrame({ 
    '{}'.format(target_amount): df_sum[target_amount]
  , window_col  : df_sum[target_amount].rolling(window=window).mean()
})

# 평균값컬럼 정수로 만들기
lengna = len(df_sma[df_sma[window_col].notna()==False].index) # NaN값 길이
df_sma[window_col][lengna:] = df_sma[window_col][lengna:].astype("int")
df_sma[target_amount]                     = round(df_sma[target_amount]).astype("int")
# df_sma = df_sma.fillna(0) # 간단히 0으로 바꾸고 해도 됨
# df_sma[window_col] = df_sma[window_col].astype("int")

# 시간컬럼 인덱스 해제
df_sma.reset_index(inplace=True)
df_sma.reset_index(drop=True, inplace=True)

data = df_sma

fig,axes = plt.subplots(1,1,figsize=(20,5))
sns.lineplot( x = data[time_col],
              y = target_amount,
              data = data, ax=axes, 
              # estimator= 'sum',
              # err_style="bars",
              # hue  = legendcol
             )

# pip install plotly==3.10.0
import plotly.graph_objs as go
import plotly.express as px

fig = px.line(data_frame=data,
              x = time_col,
              y = target_amount,
              title = "여의도캠핑장 배달금액 이동평균"
              )
fig.show()

fig = go.Figure(data=go.Scatter(
    x = data[time_col],
    y = data[target_amount],
))
fig.show()

data = pop_han
time_col = "PROCESS_DT"
target_amount = "popltn_cascnt"
large_group = "sexdstn_se_code"
mid_group = "agrde_se_code"

fig = px.line(data, 
              x = data[time_col],
              y = data[target_amount],
              color = mid_group,
              line_group = large_group,
              hover_name = large_group,
              )
fig.show()

pop_han

